func returns10() {
    return 10;
}

func maths() {
    return 10 / 3.333 > 2.5;
}

func add(a: int, b: int) {
    return a + b;
}

func fibonacci(n: int) {
    if n <= 1 {
        return n;
    } else {
        return fibonacci(n - 1) + fibonacci(n - 2);
    }
}

func main() {
    // integer math
    assert(10 + 10 == 20);
    assert(10 - 10 == 0);
    assert(10 * 3 == 30);
    assert(10 / 2 == 5);
    
    // float math
    assert(10.0 + 10.0 == 20.0);
    assert(10.0 - 10.0 == 0.0);
    assert(10.0 * 3.0 == 30.0);
    assert(10.0 / 2.0 == 5.0);

    // integer-float math
    assert(10 + 10.0 == 20.0);
    assert(10 - 10.0 == 0.0);
    assert(10 * 3.0 == 30.0);
    assert(10 / 2.0 == 5.0);

    // float-integer math
    assert(10.0 + 10 == 20.0);
    assert(10.0 - 10 == 0.0);
    assert(10.0 * 3 == 30.0);
    assert(10.0 / 2 == 5.0);

    // integer comparisons
    assert(0 == 0);
    assert(1 > 0);
    assert(0 < 1);
    assert(1 >= 0);
    assert(1 >= 1);
    assert(0 <= 1);
    assert(1 <= 1);

    // float comparisons
    assert(10.0 == 10.0);
    assert(11.0 > 10.0);
    assert(10.0 < 11.0);
    assert(11.0 >= 10.0);
    assert(11.0 >= 11.0);
    assert(10.0 <= 11.0);
    assert(11.0 <= 11.0);

    // function calls
    assert(returns10() == 10);
    assert(maths());
    assert(add(10, 10) == 20);
    assert(fibonacci(10) == 55);

    // variables
    let a = 10;
    let b = a;
    b = a = 11;
    assert(a == 11);
    assert(b == 11);

    // some control flow
    let c = 0;
    if c == 0 {
        c = 10;
    } else {
        c = 11;
    }
    assert(c == 10);

    let d = 0;
    if d != 0 {
        d = 10;
    } else {
        d = 11;
    }
    assert(d == 11);

    // loops
    let e = 0;
    while e < 10 {
        e = e + 1;
    }
    assert(e == 10);

    // arrays
    let f = [0];
    f[0] = 0;
    f[1] = 10;
    f[2] = 20;
    f[30] = 30;
    assert(f[0] == 0);
    assert(f[1] == 10);
    assert(f[2] == 20);
    assert(f[30] == 30);

    // assignments with arrays
    let g = [0];
    g[10] = 10;
    let h = g[10];
    assert(g[10] == 10);
    assert(h == 10);
    assert(g[10] == h);
    g[10] = 12;
    h = g[10];
    assert(g[10] == 12);
    assert(h == 12);
    assert(g[10] == h);

    // Assignments in control flow
    a = 0;
    b = 10;
    if a = b {
        b = 11;
    }
    assert(a == 10);
    assert(b == 11);
}